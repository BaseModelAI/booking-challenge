import logging
import os
import subprocess
import numpy as np
import pandas as pd
from typing import List


log = logging.getLogger(__name__)


def prepare_cleora_directed_input(filename: str, data: pd.DataFrame):
    """
    Prepare file such as, for trip X->H->Z->X:
    START X_B
    X_A H_B
    H_A Z_B
    Z_A X_B
    X_A END
    """
    log.info("Preparing input file to Cleora")
    data_grouped_utrip = data.groupby('utrip_id')
    with open(filename, 'w') as f:
        for utrip_id, rows in data_grouped_utrip:
            for i in range(0, len(rows)+1):
                if i == 0:
                    f.write(f"START\t{rows['city_id'].tolist()[0]}_B\n")
                elif i == len(rows):
                    f.write(f"{rows['city_id'].tolist()[-1]}_A\tEND\n")
                else:
                    f.write(f"{rows['city_id'].tolist()[i-1]}_A\t{rows['city_id'].tolist()[i]}_B\n")


def get_cleora_output_directed(filename: str, all_cities: List[str]):
    """
    Read embeddings from file generated by cleora.
    """
    id2embedding = {}
    with open(filename, 'r') as f:
        next(f) # skip cleora header
        for index, line in enumerate(f):
            line_splitted = line.split(sep=' ')
            id = str(line_splitted[0])
            embedding = np.array([float(i) for i in line_splitted[2:]])
            id2embedding[id] = embedding

    ids = []
    embeddings = []
    for city in all_cities:
        ids.append(city)
        embeddings.append(np.concatenate((id2embedding[f'{city}_A'], id2embedding[f'{city}_B'])))

    return ids, np.stack(embeddings)


def train_cleora(dim: int, iter_: int, columns: str, input_filename: str, working_dir: str):
    """
    Training Cleora. See more details: https://github.com/Synerise/cleora/
    """
    command = ['./cleora-v1.1.0-x86_64-unknown-linux-gnu',
               '--columns', columns,
               '--dimension', str(dim),
               '-n', str(iter_),
               '--input', input_filename,
               '--output-dir', working_dir]
    subprocess.run(command, check=True)


def run_cleora_directed(working_dir: str, input_file: str, dim: int, iter_: int ,all_cities: List[str]):
    train_cleora(dim, iter_, 'nodeStart nodeEnd', input_file, working_dir)
    return get_cleora_output_directed(os.path.join(working_dir, 'emb__nodeStart__nodeEnd.out'), all_cities)
